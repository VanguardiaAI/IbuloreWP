#!/usr/bin/env python3
"""
Script para restaurar la p√°gina de inicio y revertir cambios problem√°ticos.
Restaura la configuraci√≥n original del tema sin perder la funcionalidad.
"""

import json
import sys
import time
from utils.wordpress_api import get_wp_api

class HomepageRestorer:
    def __init__(self):
        self.wp_api = get_wp_api()
    
    def restore_homepage(self):
        """Restaura la configuraci√≥n original de la p√°gina de inicio."""
        print("üîÑ Restaurando p√°gina de inicio...")
        
        try:
            # 1. Restaurar configuraci√≥n de p√°gina de inicio
            self.restore_front_page_settings()
            
            # 2. Eliminar p√°gina de inicio personalizada problem√°tica
            self.remove_custom_homepage()
            
            # 3. Restaurar configuraciones del tema
            self.restore_theme_settings()
            
            print("‚úÖ P√°gina de inicio restaurada exitosamente!")
            
        except Exception as e:
            print(f"‚ùå Error durante la restauraci√≥n: {str(e)}")
            sys.exit(1)
    
    def restore_front_page_settings(self):
        """Restaura la configuraci√≥n original de la p√°gina frontal."""
        print("\nüè† Restaurando configuraci√≥n de p√°gina frontal...")
        
        # Configurar para mostrar las √∫ltimas entradas (configuraci√≥n por defecto)
        settings = {
            "show_on_front": "posts",  # Mostrar √∫ltimas entradas en lugar de p√°gina est√°tica
            "page_on_front": 0,       # No usar p√°gina est√°tica espec√≠fica
            "page_for_posts": 0       # No usar p√°gina espec√≠fica para blog
        }
        
        for setting, value in settings.items():
            try:
                response = self.wp_api.put("settings", {setting: value})
                if response.status_code == 200:
                    print(f"  ‚úÖ {setting}: {value}")
                else:
                    print(f"  ‚ö†Ô∏è No se pudo restaurar {setting}")
                time.sleep(0.3)
            except Exception as e:
                print(f"  ‚ùå Error con {setting}: {str(e)}")
    
    def remove_custom_homepage(self):
        """Elimina la p√°gina de inicio personalizada que caus√≥ problemas."""
        print("\nüóëÔ∏è Eliminando p√°gina de inicio problem√°tica...")
        
        try:
            # Buscar la p√°gina de inicio creada
            pages_response = self.wp_api.get("pages", params={"slug": "inicio"})
            pages = pages_response.json()
            
            if pages:
                page_id = pages[0]["id"]
                
                # Eliminar la p√°gina
                response = self.wp_api.delete(f"pages/{page_id}", params={"force": True})
                if response.status_code == 200:
                    print("  ‚úÖ P√°gina de inicio personalizada eliminada")
                else:
                    print("  ‚ö†Ô∏è No se pudo eliminar la p√°gina")
            else:
                print("  ‚ÑπÔ∏è No se encontr√≥ p√°gina de inicio personalizada")
                
        except Exception as e:
            print(f"  ‚ùå Error eliminando p√°gina: {str(e)}")
    
    def restore_theme_settings(self):
        """Restaura configuraciones b√°sicas del tema sin perder personalizaciones √∫tiles."""
        print("\n‚öôÔ∏è Restaurando configuraciones del tema...")
        
        # Mantener las configuraciones √∫tiles pero restaurar las problem√°ticas
        safe_settings = {
            "posts_per_page": 10,  # Valor por defecto de WordPress
            "default_comment_status": "open",
            "default_ping_status": "open",
            "start_of_week": 1
        }
        
        for setting, value in safe_settings.items():
            try:
                response = self.wp_api.put("settings", {setting: value})
                if response.status_code == 200:
                    print(f"  ‚úÖ {setting}: {value}")
                time.sleep(0.2)
            except Exception as e:
                print(f"  ‚ö†Ô∏è Error con {setting}: {str(e)}")
    
    def preserve_useful_changes(self):
        """Preserva los cambios √∫tiles que no afectan la estructura visual."""
        print("\nüíæ Preservando cambios √∫tiles...")
        
        # Mantener t√≠tulo y descripci√≥n del sitio (estos no afectan la estructura)
        useful_settings = {
            "title": "Bot√°nica Osh√∫n - Art√≠culos Religiosos Yoruba",
            "description": "Tu tienda de confianza para productos de Santer√≠a, If√° y tradiciones Yoruba",
            "language": "es_ES",
            "timezone": "America/New_York"
        }
        
        for setting, value in useful_settings.items():
            try:
                response = self.wp_api.put("settings", {setting: value})
                if response.status_code == 200:
                    print(f"  ‚úÖ Mantenido {setting}")
                time.sleep(0.2)
            except Exception as e:
                print(f"  ‚ö†Ô∏è Error manteniendo {setting}: {str(e)}")
    
    def check_homepage_status(self):
        """Verifica el estado actual de la p√°gina de inicio."""
        print("\nüîç Verificando estado de la p√°gina de inicio...")
        
        try:
            # Obtener configuraciones actuales
            settings_response = self.wp_api.get("settings")
            if settings_response.status_code == 200:
                settings = settings_response.json()
                
                show_on_front = settings.get("show_on_front", "posts")
                page_on_front = settings.get("page_on_front", 0)
                
                print(f"  üìã Configuraci√≥n actual:")
                print(f"     - Mostrar en portada: {show_on_front}")
                print(f"     - ID de p√°gina frontal: {page_on_front}")
                
                if show_on_front == "posts":
                    print("  ‚úÖ La p√°gina de inicio est√° configurada correctamente")
                    return True
                else:
                    print("  ‚ö†Ô∏è La p√°gina de inicio necesita ajustes")
                    return False
            
        except Exception as e:
            print(f"  ‚ùå Error verificando estado: {str(e)}")
            return False

def main():
    """Funci√≥n principal."""
    print("üö® RESTAURADOR DE P√ÅGINA DE INICIO üö®")
    print("=" * 50)
    
    try:
        restorer = HomepageRestorer()
        
        # Verificar estado actual
        current_status = restorer.check_homepage_status()
        
        if not current_status:
            print("\nüîß Iniciando restauraci√≥n...")
            
            # Restaurar p√°gina de inicio
            restorer.restore_homepage()
            
            # Preservar cambios √∫tiles
            restorer.preserve_useful_changes()
            
            # Verificar resultado
            print("\nüîç Verificaci√≥n final...")
            final_status = restorer.check_homepage_status()
            
            if final_status:
                print("\nüéâ ¬°Restauraci√≥n completada exitosamente!")
            else:
                print("\n‚ö†Ô∏è La restauraci√≥n necesita ajustes manuales")
        else:
            print("\n‚úÖ La p√°gina de inicio ya est√° configurada correctamente")
        
        print("\nüìå PR√ìXIMOS PASOS:")
        print("1. Revisar el sitio web para confirmar que la estructura est√° restaurada")
        print("2. El t√≠tulo y descripci√≥n del sitio se mantuvieron")
        print("3. Las p√°ginas informativas creadas siguen disponibles")
        print("4. La configuraci√≥n del tema vuelve a funcionar normalmente")
        print("\nüí° RECOMENDACI√ìN:")
        print("Para futuras personalizaciones, modifica solo el contenido")
        print("sin cambiar la configuraci√≥n de p√°gina frontal del tema.")
        
    except Exception as e:
        print(f"\n‚ùå Error fatal: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main() 