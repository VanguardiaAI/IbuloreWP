#!/usr/bin/env python3
"""
Script para configurar la p√°gina "Home 3" como p√°gina principal del sitio.
Busca entre las p√°ginas del tema Joice y configura la correcta.
"""

import json
import sys
import time
from utils.wordpress_api import get_wp_api

class Home3Configurator:
    def __init__(self):
        self.wp_api = get_wp_api()
    
    def find_and_set_home3(self):
        """Busca la p√°gina Home 3 y la configura como p√°gina principal."""
        print("üîç Buscando p√°gina Home 3...")
        
        try:
            # 1. Buscar todas las p√°ginas que contengan "Home"
            self.search_home_pages()
            
            # 2. Buscar espec√≠ficamente "Home 3"
            home3_page = self.find_home3_page()
            
            if home3_page:
                # 3. Configurar Home 3 como p√°gina principal
                self.set_as_homepage(home3_page)
            else:
                print("‚ùå No se encontr√≥ la p√°gina Home 3")
                print("üí° Mostrando todas las p√°ginas disponibles...")
                self.list_all_pages()
            
        except Exception as e:
            print(f"‚ùå Error durante la configuraci√≥n: {str(e)}")
            sys.exit(1)
    
    def search_home_pages(self):
        """Busca todas las p√°ginas que contengan 'Home' en el t√≠tulo."""
        print("\nüìã Buscando p√°ginas Home disponibles...")
        
        try:
            # Buscar p√°ginas con "Home" en el t√≠tulo
            home_pages_response = self.wp_api.get("pages", params={
                "search": "Home",
                "per_page": 50,
                "status": "publish"
            })
            
            if home_pages_response.status_code == 200:
                home_pages = home_pages_response.json()
                
                if home_pages:
                    print(f"  ‚úÖ Encontradas {len(home_pages)} p√°ginas Home:")
                    for page in home_pages:
                        print(f"     - ID: {page['id']} | T√≠tulo: '{page['title']['rendered']}' | Slug: '{page['slug']}'")
                else:
                    print("  ‚ö†Ô∏è No se encontraron p√°ginas con 'Home' en el t√≠tulo")
            
        except Exception as e:
            print(f"  ‚ùå Error buscando p√°ginas Home: {str(e)}")
    
    def find_home3_page(self):
        """Busca espec√≠ficamente la p√°gina Home 3."""
        print("\nüéØ Buscando p√°gina Home 3 espec√≠ficamente...")
        
        try:
            # Buscar por diferentes variaciones de "Home 3"
            search_terms = ["Home 3", "Home3", "home-3", "home3"]
            
            for term in search_terms:
                print(f"  üîç Buscando: '{term}'")
                
                # Buscar por t√≠tulo
                pages_response = self.wp_api.get("pages", params={
                    "search": term,
                    "per_page": 10,
                    "status": "publish"
                })
                
                if pages_response.status_code == 200:
                    pages = pages_response.json()
                    
                    for page in pages:
                        title = page['title']['rendered'].lower()
                        slug = page['slug'].lower()
                        
                        # Verificar si es exactamente Home 3
                        if ('home 3' in title or 'home3' in title or 
                            'home-3' in slug or 'home3' in slug):
                            print(f"  ‚úÖ ¬°Encontrada Home 3!")
                            print(f"     - ID: {page['id']}")
                            print(f"     - T√≠tulo: '{page['title']['rendered']}'")
                            print(f"     - Slug: '{page['slug']}'")
                            return page
                
                # Buscar por slug tambi√©n
                slug_response = self.wp_api.get("pages", params={
                    "slug": term.lower().replace(" ", "-"),
                    "status": "publish"
                })
                
                if slug_response.status_code == 200:
                    slug_pages = slug_response.json()
                    if slug_pages:
                        page = slug_pages[0]
                        print(f"  ‚úÖ ¬°Encontrada Home 3 por slug!")
                        print(f"     - ID: {page['id']}")
                        print(f"     - T√≠tulo: '{page['title']['rendered']}'")
                        print(f"     - Slug: '{page['slug']}'")
                        return page
            
            print("  ‚ùå No se encontr√≥ p√°gina Home 3 con los t√©rminos buscados")
            return None
            
        except Exception as e:
            print(f"  ‚ùå Error buscando Home 3: {str(e)}")
            return None
    
    def set_as_homepage(self, page):
        """Configura la p√°gina encontrada como p√°gina principal."""
        print(f"\nüè† Configurando '{page['title']['rendered']}' como p√°gina principal...")
        
        try:
            page_id = page['id']
            
            # Configurar como p√°gina frontal
            settings = {
                "show_on_front": "page",
                "page_on_front": page_id,
                "page_for_posts": 0  # No usar p√°gina espec√≠fica para blog
            }
            
            for setting, value in settings.items():
                response = self.wp_api.put("settings", {setting: value})
                if response.status_code == 200:
                    print(f"  ‚úÖ {setting}: {value}")
                else:
                    print(f"  ‚ö†Ô∏è No se pudo configurar {setting}")
                time.sleep(0.3)
            
            print(f"\nüéâ ¬°Home 3 configurada como p√°gina principal!")
            print(f"   P√°gina: {page['title']['rendered']} (ID: {page_id})")
            
        except Exception as e:
            print(f"  ‚ùå Error configurando p√°gina principal: {str(e)}")
    
    def list_all_pages(self):
        """Lista todas las p√°ginas disponibles para ayudar a identificar Home 3."""
        print("\nüìÑ Listando todas las p√°ginas disponibles...")
        
        try:
            all_pages_response = self.wp_api.get("pages", params={
                "per_page": 100,
                "status": "publish",
                "orderby": "title",
                "order": "asc"
            })
            
            if all_pages_response.status_code == 200:
                all_pages = all_pages_response.json()
                
                print(f"  üìã Total de p√°ginas: {len(all_pages)}")
                print("  " + "="*60)
                
                for page in all_pages:
                    title = page['title']['rendered']
                    slug = page['slug']
                    page_id = page['id']
                    
                    # Destacar p√°ginas que podr√≠an ser Home 3
                    if any(term in title.lower() for term in ['home', 'inicio']):
                        print(f"  üè† ID: {page_id:4} | '{title}' | Slug: '{slug}'")
                    else:
                        print(f"     ID: {page_id:4} | '{title}' | Slug: '{slug}'")
                
                print("  " + "="*60)
                print("  üí° Las p√°ginas marcadas con üè† podr√≠an ser opciones de Home")
            
        except Exception as e:
            print(f"  ‚ùå Error listando p√°ginas: {str(e)}")
    
    def manual_set_homepage(self, page_id):
        """Permite configurar manualmente una p√°gina como principal por ID."""
        print(f"\nüîß Configurando p√°gina ID {page_id} como p√°gina principal...")
        
        try:
            # Verificar que la p√°gina existe
            page_response = self.wp_api.get(f"pages/{page_id}")
            
            if page_response.status_code == 200:
                page = page_response.json()
                print(f"  ‚úÖ P√°gina encontrada: '{page['title']['rendered']}'")
                
                # Configurar como p√°gina frontal
                settings = {
                    "show_on_front": "page",
                    "page_on_front": page_id,
                    "page_for_posts": 0
                }
                
                for setting, value in settings.items():
                    response = self.wp_api.put("settings", {setting: value})
                    if response.status_code == 200:
                        print(f"  ‚úÖ {setting}: {value}")
                    time.sleep(0.3)
                
                print(f"\nüéâ ¬°P√°gina configurada como principal!")
                
            else:
                print(f"  ‚ùå No se encontr√≥ p√°gina con ID {page_id}")
                
        except Exception as e:
            print(f"  ‚ùå Error configurando p√°gina: {str(e)}")
    
    def check_current_homepage(self):
        """Verifica cu√°l es la p√°gina principal actual."""
        print("\nüîç Verificando p√°gina principal actual...")
        
        try:
            settings_response = self.wp_api.get("settings")
            if settings_response.status_code == 200:
                settings = settings_response.json()
                
                show_on_front = settings.get("show_on_front", "posts")
                page_on_front = settings.get("page_on_front", 0)
                
                print(f"  üìã Configuraci√≥n actual:")
                print(f"     - Mostrar en portada: {show_on_front}")
                print(f"     - ID de p√°gina frontal: {page_on_front}")
                
                if show_on_front == "page" and page_on_front > 0:
                    # Obtener informaci√≥n de la p√°gina actual
                    page_response = self.wp_api.get(f"pages/{page_on_front}")
                    if page_response.status_code == 200:
                        page = page_response.json()
                        print(f"     - P√°gina actual: '{page['title']['rendered']}'")
                        print(f"     - Slug: '{page['slug']}'")
                        
                        # Verificar si ya es Home 3
                        title = page['title']['rendered'].lower()
                        if 'home 3' in title or 'home3' in title:
                            print("  ‚úÖ ¬°Ya est√° configurada Home 3!")
                            return True
                        else:
                            print("  ‚ö†Ô∏è No es Home 3, necesita cambio")
                            return False
                else:
                    print("  ‚ö†Ô∏è No hay p√°gina est√°tica configurada")
                    return False
            
        except Exception as e:
            print(f"  ‚ùå Error verificando p√°gina actual: {str(e)}")
            return False

def main():
    """Funci√≥n principal."""
    print("üè† CONFIGURADOR DE HOME 3 üè†")
    print("=" * 40)
    
    try:
        configurator = Home3Configurator()
        
        # Verificar p√°gina actual
        is_home3 = configurator.check_current_homepage()
        
        if not is_home3:
            print("\nüîß Buscando y configurando Home 3...")
            configurator.find_and_set_home3()
            
            # Verificar resultado
            print("\nüîç Verificaci√≥n final...")
            final_check = configurator.check_current_homepage()
            
            if final_check:
                print("\nüéâ ¬°HOME 3 CONFIGURADA EXITOSAMENTE!")
            else:
                print("\n‚ö†Ô∏è No se pudo configurar autom√°ticamente")
                print("\nüí° SOLUCI√ìN MANUAL:")
                print("1. Revisa la lista de p√°ginas arriba")
                print("2. Identifica el ID de la p√°gina Home 3")
                print("3. Ejecuta: configurator.manual_set_homepage(ID)")
        else:
            print("\n‚úÖ Home 3 ya est√° configurada correctamente")
        
        print("\nüìå INSTRUCCIONES:")
        print("- Si no se encontr√≥ Home 3 autom√°ticamente")
        print("- Revisa la lista de p√°ginas mostrada arriba")
        print("- Busca una p√°gina con nombre similar a 'Home 3'")
        print("- Anota su ID y av√≠same para configurarla manualmente")
        
    except Exception as e:
        print(f"\n‚ùå Error fatal: {str(e)}")
        sys.exit(1)

if __name__ == "__main__":
    main() 