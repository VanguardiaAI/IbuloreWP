#!/usr/bin/env python3
"""
Script para restaurar completamente el sitio a su estado original.
Revierte todos los cambios y restaura la configuraci√≥n original del tema.
"""

import json
import sys
import time
from utils.wordpress_api import get_wp_api

class FullSiteRestorer:
    def __init__(self):
        self.wp_api = get_wp_api()
    
    def full_restore(self):
        """Restaura completamente el sitio a su estado original."""
        print("üîÑ Restaurando sitio completo a estado original...")
        
        try:
            # 1. Restaurar nombre y configuraciones originales
            self.restore_original_settings()
            
            # 2. Restaurar configuraci√≥n de p√°gina principal
            self.restore_homepage_configuration()
            
            # 3. Eliminar p√°ginas creadas por los scripts
            self.remove_created_pages()
            
            # 4. Restaurar configuraciones de WooCommerce
            self.restore_woocommerce_settings()
            
            print("‚úÖ Restauraci√≥n completa finalizada!")
            
        except Exception as e:
            print(f"‚ùå Error durante la restauraci√≥n: {str(e)}")
            sys.exit(1)
    
    def restore_original_settings(self):
        """Restaura el nombre original y configuraciones del sitio."""
        print("\nüìù Restaurando nombre y configuraciones originales...")
        
        # Configuraciones originales del sitio
        original_settings = {
            "title": "Ibulor√©",  # Nombre original
            "description": "Just another WordPress site",  # Descripci√≥n por defecto
            "language": "en_US",  # Idioma original
            "timezone": "UTC",    # Zona horaria por defecto
            "date_format": "F j, Y",
            "time_format": "g:i a",
            "start_of_week": 1
        }
        
        for setting, value in original_settings.items():
            try:
                response = self.wp_api.put("settings", {setting: value})
                if response.status_code == 200:
                    print(f"  ‚úÖ {setting}: {value}")
                else:
                    print(f"  ‚ö†Ô∏è No se pudo restaurar {setting}")
                time.sleep(0.3)
            except Exception as e:
                print(f"  ‚ùå Error con {setting}: {str(e)}")
    
    def restore_homepage_configuration(self):
        """Restaura la configuraci√≥n original de la p√°gina principal."""
        print("\nüè† Restaurando configuraci√≥n de p√°gina principal...")
        
        try:
            # Buscar si existe una p√°gina llamada "Home" o "Inicio" original
            home_pages = self.wp_api.get("pages", params={"search": "Home"})
            
            # Configurar para mostrar p√°gina est√°tica si existe, o posts si no
            if home_pages.json():
                # Si existe una p√°gina Home, usarla
                home_page_id = home_pages.json()[0]["id"]
                settings = {
                    "show_on_front": "page",
                    "page_on_front": home_page_id,
                    "page_for_posts": 0
                }
                print(f"  üìÑ Usando p√°gina Home existente (ID: {home_page_id})")
            else:
                # Si no existe, buscar la configuraci√≥n original del tema
                settings = {
                    "show_on_front": "page",  # La mayor√≠a de temas usan p√°gina est√°tica
                    "page_on_front": 0,      # Dejar que WordPress determine
                    "page_for_posts": 0
                }
                print("  üìÑ Configurando para usar p√°gina por defecto del tema")
            
            for setting, value in settings.items():
                try:
                    response = self.wp_api.put("settings", {setting: value})
                    if response.status_code == 200:
                        print(f"  ‚úÖ {setting}: {value}")
                    time.sleep(0.3)
                except Exception as e:
                    print(f"  ‚ùå Error con {setting}: {str(e)}")
                    
        except Exception as e:
            print(f"  ‚ùå Error configurando p√°gina principal: {str(e)}")
    
    def remove_created_pages(self):
        """Elimina las p√°ginas que fueron creadas por los scripts."""
        print("\nüóëÔ∏è Eliminando p√°ginas creadas por scripts...")
        
        pages_to_remove = [
            "sobre-nosotros",
            "informacion-envios", 
            "faq",
            "guia-orishas",
            "inicio"
        ]
        
        for page_slug in pages_to_remove:
            try:
                pages_response = self.wp_api.get("pages", params={"slug": page_slug})
                pages = pages_response.json()
                
                if pages:
                    page_id = pages[0]["id"]
                    response = self.wp_api.delete(f"pages/{page_id}", params={"force": True})
                    if response.status_code == 200:
                        print(f"  ‚úÖ Eliminada p√°gina: {page_slug}")
                    else:
                        print(f"  ‚ö†Ô∏è No se pudo eliminar: {page_slug}")
                else:
                    print(f"  ‚ÑπÔ∏è No encontrada: {page_slug}")
                
                time.sleep(0.5)
                
            except Exception as e:
                print(f"  ‚ùå Error eliminando {page_slug}: {str(e)}")
    
    def restore_woocommerce_settings(self):
        """Restaura configuraciones originales de WooCommerce."""
        print("\nüõí Restaurando configuraciones de WooCommerce...")
        
        # Configuraciones por defecto de WooCommerce
        woo_settings = {
            "posts_per_page": 10,  # Por defecto de WordPress
            "woocommerce_shop_page_display": "products",
            "woocommerce_category_archive_display": "products", 
            "woocommerce_default_catalog_orderby": "menu_order",
            "woocommerce_catalog_columns": 4,
            "woocommerce_catalog_rows": 4
        }
        
        for setting, value in woo_settings.items():
            try:
                response = self.wp_api.put("settings", {setting: value})
                if response.status_code == 200:
                    print(f"  ‚úÖ {setting}: {value}")
                time.sleep(0.2)
            except Exception as e:
                print(f"  ‚ö†Ô∏è Error con {setting}: {str(e)}")
    
    def restore_original_pages(self):
        """Intenta restaurar p√°ginas originales del tema si existen."""
        print("\nüìÑ Verificando p√°ginas originales...")
        
        # P√°ginas t√≠picas de WooCommerce que deber√≠an existir
        woo_pages = ["shop", "cart", "checkout", "my-account"]
        
        for page_slug in woo_pages:
            try:
                pages_response = self.wp_api.get("pages", params={"slug": page_slug})
                pages = pages_response.json()
                
                if pages:
                    page_id = pages[0]["id"]
                    # Restaurar t√≠tulos originales
                    original_titles = {
                        "shop": "Shop",
                        "cart": "Cart", 
                        "checkout": "Checkout",
                        "my-account": "My account"
                    }
                    
                    if page_slug in original_titles:
                        response = self.wp_api.put(f"pages/{page_id}", {
                            "title": original_titles[page_slug]
                        })
                        if response.status_code == 200:
                            print(f"  ‚úÖ Restaurado t√≠tulo original: {original_titles[page_slug]}")
                
                time.sleep(0.3)
                
            except Exception as e:
                print(f"  ‚ö†Ô∏è Error con p√°gina {page_slug}: {str(e)}")
    
    def check_site_status(self):
        """Verifica el estado final del sitio."""
        print("\nüîç Verificando estado final del sitio...")
        
        try:
            settings_response = self.wp_api.get("settings")
            if settings_response.status_code == 200:
                settings = settings_response.json()
                
                print(f"  üìã Configuraci√≥n actual:")
                print(f"     - T√≠tulo: {settings.get('title', 'N/A')}")
                print(f"     - Descripci√≥n: {settings.get('description', 'N/A')}")
                print(f"     - Idioma: {settings.get('language', 'N/A')}")
                print(f"     - Mostrar en portada: {settings.get('show_on_front', 'N/A')}")
                print(f"     - ID p√°gina frontal: {settings.get('page_on_front', 'N/A')}")
                
                if settings.get('title') == 'Ibulor√©':
                    print("  ‚úÖ Nombre del sitio restaurado correctamente")
                    return True
                else:
                    print("  ‚ö†Ô∏è El nombre del sitio necesita verificaci√≥n manual")
                    return False
            
        except Exception as e:
            print(f"  ‚ùå Error verificando estado: {str(e)}")
            return False

def main():
    """Funci√≥n principal."""
    print("üö® RESTAURACI√ìN COMPLETA DEL SITIO üö®")
    print("=" * 50)
    print("Este script restaurar√° el sitio a su estado original:")
    print("- Nombre: Ibulor√©")
    print("- P√°gina principal del tema")
    print("- Configuraciones originales")
    print("- Eliminar√° p√°ginas creadas por scripts")
    print("=" * 50)
    
    try:
        restorer = FullSiteRestorer()
        
        print("\nüîß Iniciando restauraci√≥n completa...")
        
        # Restaurar todo
        restorer.full_restore()
        
        # Restaurar p√°ginas originales
        restorer.restore_original_pages()
        
        # Verificar resultado final
        print("\nüîç Verificaci√≥n final...")
        final_status = restorer.check_site_status()
        
        if final_status:
            print("\nüéâ ¬°RESTAURACI√ìN COMPLETA EXITOSA!")
        else:
            print("\n‚ö†Ô∏è La restauraci√≥n se complet√≥ con algunas advertencias")
        
        print("\nüìå ESTADO FINAL:")
        print("‚úÖ Nombre del sitio: Ibulor√©")
        print("‚úÖ P√°gina principal del tema restaurada")
        print("‚úÖ Configuraciones originales aplicadas")
        print("‚úÖ P√°ginas de scripts eliminadas")
        print("‚úÖ WooCommerce configurado con valores por defecto")
        
        print("\nüí° RECOMENDACI√ìN:")
        print("Revisa tu sitio web ahora. Deber√≠a verse exactamente")
        print("como antes de ejecutar los scripts de transformaci√≥n.")
        print("\nSi a√∫n hay problemas, considera restaurar desde backup")
        print("o reimportar los datos de prueba del tema.")
        
    except Exception as e:
        print(f"\n‚ùå Error fatal: {str(e)}")
        print("\nüîÑ ALTERNATIVA:")
        print("Si esta restauraci√≥n no funciona completamente,")
        print("te recomiendo restaurar desde un backup o")
        print("reimportar los datos de prueba del tema Joice.")
        sys.exit(1)

if __name__ == "__main__":
    main() 